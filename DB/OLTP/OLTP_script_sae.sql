SET SEARCH_PATH TO sae;

-- #region table

-- #region drop
DROP TABLE IF EXISTS ADDITIVE CASCADE;
DROP TABLE IF EXISTS BRAND CASCADE;
DROP TABLE IF EXISTS COUNTRY CASCADE;
DROP TABLE IF EXISTS CREATOR CASCADE;
DROP TABLE IF EXISTS ECOSCORE_GRADE CASCADE;
DROP TABLE IF EXISTS INGREDIENT CASCADE;
DROP TABLE IF EXISTS IS_IN CASCADE;
DROP TABLE IF EXISTS IS_MADE_BY CASCADE;
DROP TABLE IF EXISTS IS_MADE_OF CASCADE;
DROP TABLE IF EXISTS IS_SALE CASCADE;
DROP TABLE IF EXISTS LANGUAGE CASCADE;
DROP TABLE IF EXISTS NUTRISCORE_GRADE CASCADE;
DROP TABLE IF EXISTS PNNS_GROUP CASCADE;
DROP TABLE IF EXISTS POSSESES CASCADE;
DROP TABLE IF EXISTS PRODUCT CASCADE;
DROP TABLE IF EXISTS SALE CASCADE;
-- #endregion drop

CREATE TABLE ADDITIVE (
   ID_ADDITIVE          SERIAL               NOT NULL,
   ID_LANG              INT                  NOT NULL,
   ADDITIVE_TAGS        VARCHAR(100)         NOT NULL,
   CONSTRAINT PK_ADDITIVE PRIMARY KEY (ID_ADDITIVE)
);

CREATE TABLE BRAND (
   ID_BRAND             SERIAL              NOT NULL,
   BRAND_NAME           VARCHAR(100)        NOT NULL,
   CONSTRAINT PK_BRAND PRIMARY KEY (ID_BRAND)
);

CREATE TABLE COUNTRY (
   ID_COUNTRY           SERIAL               NOT NULL,
   NAME_COUNTRY         VARCHAR(50)          NOT NULL,
   CONSTRAINT PK_COUNTRY PRIMARY KEY (ID_COUNTRY)
);

CREATE TABLE CREATOR (
   ID_CREATOR           SERIAL               NOT NULL,
   NAME_CREATOR         VARCHAR(100)         NOT NULL,
   CONSTRAINT PK_CREATOR PRIMARY KEY (ID_CREATOR)
);

CREATE TABLE ECOSCORE_GRADE (
   ID_ECOSCORE_GRADE    SERIAL               NOT NULL,
   NAME_ECOSCORE_GRADE  VARCHAR(20)          NOT NULL,
   CONSTRAINT PK_ECOSCORE_GRADE PRIMARY KEY (ID_ECOSCORE_GRADE)
);

CREATE TABLE INGREDIENT (
   ID_INGREDIENT        SERIAL               NOT NULL,
   ID_LANG              INT                  NOT NULL,
   INGREDIENT_TAGS      VARCHAR(750)         NOT NULL,
   CONSTRAINT PK_INGREDIENT PRIMARY KEY (ID_INGREDIENT)
);

CREATE TABLE IS_IN (
   PNN_ID_PNNS          INT                  NOT NULL,
   ID_PNNS              INT                  NOT NULL,
   CONSTRAINT PK_IS_IN PRIMARY KEY (PNN_ID_PNNS, ID_PNNS)
);

CREATE TABLE IS_MADE_BY (
   ID_BRAND             INT                 NOT NULL,
   ID_PRODUCT           INT                 NOT NULL,
   CONSTRAINT PK_IS_MADE_BY PRIMARY KEY (ID_BRAND, ID_PRODUCT)
);

CREATE TABLE IS_MADE_OF (
   ID_PRODUCT           INT                 NOT NULL,
   ID_INGREDIENT        INT                 NOT NULL,
   CONSTRAINT PK_IS_MADE_OF PRIMARY KEY (ID_PRODUCT, ID_INGREDIENT)
);

CREATE TABLE IS_SALE (
   ID_PRODUCT           INT                 NOT NULL,
   ID_SALE              INT                 NOT NULL,
   QUANTITY             INT                 NULL,
   CONSTRAINT PK_IS_SALE PRIMARY KEY (ID_PRODUCT, ID_SALE)
);

CREATE TABLE LANGUAGE (
   ID_LANG              SERIAL               NOT NULL,
   LIBELLE_LANG         CHAR(2)              NOT NULL,
   CONSTRAINT PK_LANGUE PRIMARY KEY (ID_LANG)
);

CREATE TABLE NUTRISCORE_GRADE (
   ID_NUTRISCORE        SERIAL              NOT NULL,
   NUTRISCORE_LETTER    CHAR(1)             NULL,
   CONSTRAINT PK_NUTRISCORE_GRADE PRIMARY KEY (ID_NUTRISCORE)
);

CREATE TABLE PNNS_GROUP (
   ID_PNNS              SERIAL               NOT NULL,
   PNNS_NAME            VARCHAR(50)          NULL,
   CONSTRAINT PK_PNNS_GROUP PRIMARY KEY (ID_PNNS)
);

CREATE TABLE POSSESES (
   ID_PRODUCT           INT                 NOT NULL,
   ID_ADDITIVE          INT                 NOT NULL,
   CONSTRAINT PK_POSSESES PRIMARY KEY (ID_PRODUCT, ID_ADDITIVE)
);

CREATE TABLE PRODUCT (
    ID_PRODUCT 					INT 		NOT NULL,
    ID_PNNS 					INT 		NOT NULL,
    ID_CREATOR 					INT 		NOT NULL,
    ID_COUNTRY 					INT 		NOT NULL,
    ID_ECOSCORE_GRADE 			INT 		DEFAULT 6,
    ID_NUTRISCORE 				INT,
    PRODUCT_BARCODE 			VARCHAR(100) NOT NULL,
    PRODUCT_NAME 				VARCHAR(300),
    URL_PRODUCT 				VARCHAR(700),
    ENERGY_100G 				NUMERIC,
    ENERGY_KCAL_100G 			NUMERIC,
    FAT_100G 					NUMERIC,
    SATURATED_FAT_100G 			NUMERIC,
    CARBOHYDRATES_100G 			NUMERIC,
    SUGARS_100G 				NUMERIC,
    PROTEINS_100G 				NUMERIC,
    NUTRITION_SCORE_FR_100G 	NUMERIC,
    ECO_SCORE 					NUMERIC,
    NOVA_GROUP 					NUMERIC,
    COMPLETENESS 				NUMERIC(6,5),
    IMAGE_SMALL_URL 			VARCHAR(700),
    IMAGE_URL 					VARCHAR(700),
    CREATED_DATETIME 			DATE,
    LAST_MODIFIED_DATETIME 		DATE,
    LAST_IMAGE_DATETIME 		DATE,
   CONSTRAINT PK_PRODUCT PRIMARY KEY (ID_PRODUCT)
);
-- CLES ETRANGERE A PART : IS_MADE_BY (BRAND) / IS_MADE_OF (INGREDIENT) / POSSESES (ADDITIVE) / IS_SALE (SALE) 

CREATE TABLE SALE (
   ID_SALE              INT               	 NOT NULL,
   SALE_DATE            DATE                 NOT NULL,
   VOLUME_SALES        	MONEY                NOT NULL,
   CONSTRAINT PK_SALE PRIMARY KEY (ID_SALE)
);

-- #endregion table

-- #region relation

ALTER TABLE ADDITIVE
   ADD CONSTRAINT FK_ADDITIVE_IS_FROM_L_LANGUE FOREIGN KEY (ID_LANG)
      REFERENCES LANGUAGE (ID_LANG)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE INGREDIENT
   ADD CONSTRAINT FK_INGREDIE_IS_FROM_LANGUE FOREIGN KEY (ID_LANG)
      REFERENCES LANGUAGE (ID_LANG)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE IS_IN
   ADD CONSTRAINT FK_IS_IN_IS_IN_PNNS_GRO FOREIGN KEY (PNN_ID_PNNS)
      REFERENCES PNNS_GROUP (ID_PNNS)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE IS_IN
   ADD CONSTRAINT FK_IS_IN_IS_IN2_PNNS_GRO FOREIGN KEY (ID_PNNS)
      REFERENCES PNNS_GROUP (ID_PNNS)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE IS_MADE_BY
   ADD CONSTRAINT FK_IS_MADE__FK_IS_MAD_BRAND FOREIGN KEY (ID_BRAND)
      REFERENCES BRAND (ID_BRAND)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE IS_MADE_BY
   ADD CONSTRAINT FK_IS_MADE__FK_IS_MAD_PRODUCT FOREIGN KEY (ID_PRODUCT)
      REFERENCES PRODUCT (ID_PRODUCT)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE IS_MADE_OF
   ADD CONSTRAINT FK_IS_MADE__FK_IS_MAD_INGREDIE FOREIGN KEY (ID_INGREDIENT)
      REFERENCES INGREDIENT (ID_INGREDIENT)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE IS_MADE_OF
   ADD CONSTRAINT FK_IS_MADE__FK_IS_MAD_PRODUCT FOREIGN KEY (ID_PRODUCT)
      REFERENCES PRODUCT (ID_PRODUCT)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE IS_SALE
   ADD CONSTRAINT FK_IS_SALE_FK_IS_SAL_PRODUCT FOREIGN KEY (ID_PRODUCT)
      REFERENCES PRODUCT (ID_PRODUCT)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE IS_SALE
   ADD CONSTRAINT FK_IS_SALE_FK_IS_SAL_SALE FOREIGN KEY (ID_SALE)
      REFERENCES SALE (ID_SALE)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE POSSESES
   ADD CONSTRAINT FK_POSSESES_FK_POSSES_PRODUCT FOREIGN KEY (ID_PRODUCT)
      REFERENCES PRODUCT (ID_PRODUCT)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE POSSESES
   ADD CONSTRAINT FK_POSSESES_FK_POSSES_ADDITIVE FOREIGN KEY (ID_ADDITIVE)
      REFERENCES ADDITIVE (ID_ADDITIVE)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PRODUCT
   ADD CONSTRAINT FK_PRODUCT_FK_PRODUC_CREATOR FOREIGN KEY (ID_CREATOR)
      REFERENCES CREATOR (ID_CREATOR)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PRODUCT
   ADD CONSTRAINT FK_PRODUCT_FK_PRODUC_NUTRISCO FOREIGN KEY (ID_NUTRISCORE)
      REFERENCES NUTRISCORE_GRADE (ID_NUTRISCORE)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PRODUCT
   ADD CONSTRAINT FK_PRODUCT_FK_PRODUC_PNNS_GRO FOREIGN KEY (ID_PNNS)
      REFERENCES PNNS_GROUP (ID_PNNS)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PRODUCT
   ADD CONSTRAINT FK_PRODUCT_FK_PRODUC_COUNTRY FOREIGN KEY (ID_COUNTRY)
      REFERENCES COUNTRY (ID_COUNTRY)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE PRODUCT
   ADD CONSTRAINT FK_PRODUCT_FK_PRODUC_ECOSCORE FOREIGN KEY (ID_ECOSCORE_GRADE)
      REFERENCES ECOSCORE_GRADE (ID_ECOSCORE_GRADE)
      ON DELETE RESTRICT ON UPDATE RESTRICT;

-- #endregion relation

-- #region index

-- #region drop
DROP INDEX IF EXISTS HAVE_FK;
DROP INDEX IF EXISTS IS_MADE_BY_FK;
DROP INDEX IF EXISTS IS_MADE_BY2_FK;
DROP INDEX IF EXISTS IS_MADE_OF_FK;
DROP INDEX IF EXISTS IS_MADE_OF2_FK;
DROP INDEX IF EXISTS IS_SALE_FK;
DROP INDEX IF EXISTS IS_SALE2_FK;
DROP INDEX IF EXISTS POSSESES_FK;
DROP INDEX IF EXISTS POSSESES2_FK;
DROP INDEX IF EXISTS POSSEDE_FK;
DROP INDEX IF EXISTS IS_A_PART_OF_FK;
DROP INDEX IF EXISTS IS_SOLD_IN_FK;
DROP INDEX IF EXISTS CREATES_FK;
-- #endregion drop

CREATE INDEX CREATES_FK ON PRODUCT (ID_CREATOR);

CREATE INDEX HAVE_FK ON PRODUCT (ID_NUTRISCORE);

CREATE INDEX IS_A_PART_OF_FK ON PRODUCT (ID_PNNS);

CREATE INDEX IS_MADE_BY_FK ON IS_MADE_BY (ID_PRODUCT);

CREATE INDEX IS_MADE_BY2_FK ON IS_MADE_BY (ID_BRAND);

CREATE INDEX IS_MADE_OF_FK ON IS_MADE_OF (ID_INGREDIENT);

CREATE INDEX IS_MADE_OF2_FK ON IS_MADE_OF (ID_PRODUCT);

CREATE INDEX IS_SALE2_FK ON IS_SALE (ID_PRODUCT);

CREATE INDEX IS_SALE_FK ON IS_SALE (ID_SALE);

CREATE INDEX IS_SOLD_IN_FK ON PRODUCT (ID_COUNTRY);

CREATE INDEX POSSESES2_FK ON POSSESES (ID_PRODUCT);

CREATE INDEX POSSESES_FK ON POSSESES (ID_ADDITIVE);

CREATE INDEX POSSEDE_FK ON PRODUCT (ID_ECOSCORE_GRADE);

-- #endregion index

